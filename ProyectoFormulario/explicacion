/* evento load: Definición de manejadores de eventos mediante Javascript */
/*Referenciar elementos en este caso al formulario y cada uno de los input*/
window. addEventListener('load', ()=> {
    //const form = document.getElementById('formulario')
    const form = document.querySelector('#formulario')
    const usuario = document.getElementById('usuario')
    const email = document.getElementById('email')
    const pass = document.getElementById('pass')
    const passConfirma = document.getElementById('passConfirma') //document es todo el html

    /*capturar evento submit para nuestro formulario y prevenir el envio del formulario sin la informacion solicitada*/
    /*Prevent default: prevenimos el comportamiento por defecto que realiza la pagina una vez que desencademos el evento submit
    Lo bueno de esto es que se pueden realizar todas las validaciones y controles, enseñandolos en la pagina donde se esta trabajando, 
    hasta que se cumplan y recien ahi desencadenamos este evento */
    form.addEventListener('submit', (e) => {
        e.preventDefault()
        validaCampos()
    //validaCampos es una funcion para validar cada uno de los input
    })

    //VALIDACION CAMPO USUARIO
    const validaCampos = ()=> {
        /*capturar los valores ingresados por el usuario, como ya tenemos referenciados los elementos(usuario,email, pass, passConfirma)
        y cada uno se le va a asignar a una constante*/
        const usuarioValor = usuario.value.trim() /*El metodo trim lo que hace es eliminar los espacios en blanco en ambos extremos del string, 
        en este contexto los espacios en blanco son todos los caracteres sin contenido*/
        const emailValor = email.value.trim()
        const passValor = pass.value.trim()
        const passConfirmaValor = passConfirma.value.trim()

        
        /*VALIDACION CAMPO USUARIO*/
        if(!usuarioValor){
            console.log('CAMPO VACIO')
            validaFalla(usuario, 'campo vacio')//Primera comprobacion: Que el usuario ingrese algun dato, que no deje espacios
        }else{
            validaOk(usuario)
        } /*El simbolo de note (!) note logico, devuelve falsos y su unico operando se puede convertir a true
        de lo contrario devuelve true. Para enseñar un msje y pintar de un color el recuadro crearemos un metodo o una funcion
        y le vamos a poner en caso de que sea falla "validaFalla", aqui pondremos la referencia del "usuario"y un msje que indique la falla,
        en caso de que esté bien "validadOk"se pondra la referencia del "usuario"
        Luego de lo antes realizado, se definiran las funciones "validaFalla" y "validaOk" 
        
        /* OTRA MANERA DE HACERLO: 
        if(usuarioValor === ''){
            console.log('CAMPO VACIO')
        }else{
            console.log(usuarioValor)
        } 
        el === sirve para comparar el valor de ddos objetos sin forzar la conversion automatica de tipos*/
         
        /*OTRA MANERA DE HACERLO: Operador ternario y se coloca un ; al final de las constantes defininidas para evitar errores

        (!usuarioValor) ? console.log('CAMPO VACIO') : console.log(usuarioValor)*/    


    //VALIDACION CAMPO EMAIL
        if(!emailValor){
            validaFalla(email, 'campo vacio')
        }else if(!validaEmail (emailValor)){
            validaFalla(email, 'El e-mail no es valido')
        }else{
            validaOk(email)
        }

        /*Con el else if lo que vamos a corroborar  es que si no esta vacio, sea un email valido, 
        dentro se le pondra una variable que declararemos mas adelante y le pasaremos un valor, 
        en este caso emailValor*/


    //VALIDACION CAMPO CONTRASEÑA
        const er = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,18}$/
    
        if(!passValor){
            validaFalla(pass, 'campo vacio')
        } else if(passValor.length < 8){
            validaFalla(pass, 'Debe tener 8 caracteres como minimo')
        } else if(!passValor.match(er)){
            validaFalla(pass, 'Debe tener al menos una may., y una min y un num.')
        } else{
            validaOk(pass)
        }
    //El metodo match se utiliza para obtener todas las ocurrencias de una expresion regular dentro de una
     
     //VALIDACION CAMPO CONFIRMACION DE CONTRASEÑA
        if(!passConfirmaValor){
            validaFalla(passConfirma, 'Confirme su contraseña')
        } else if(passValor !== passConfirmaValor) {
            validaFalla(passConfirma, 'No coincide la contraseña')
        } else{
            validaOk(passConfirma)
        }

    }
        
    
         /*definicion de variables validaFalla y validaOk*/
    const validaFalla = (input, msje) => {
        const formControl = input.parentElement /*La propiedad parent element devuelve el elemento padre del 
         elemento especificado, y se lo asignaremos a la variable formControl, de esta manera podremos enseñar el 
         msje debajo del campo del input*/
        const aviso = formControl.querySelector('p')
        aviso.innerText = msje
        /*Añadiremos una clase para pintar de color rojo el input si esta incorrecto y de color verde si esta correcto*/

            formControl.className = 'form-control falla'
        /* La clase creada (form-control falla) la llamaremos en el css para aplicarle el estilo*/ 
    }

    const validaOk = (input, msje) => {
        const formControl = input.parentElement 
        formControl.className = 'form-control ok'
        /* La clase creada (form-control falla) la llamaremos en el css para aplicarle el estilo*/ 

    }  
    // En ambas variables se pasaránmlos parametros input y msje

    const validaEmail = (email) => {
        return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
    }
    //Aqui se trabajará las expresiones regulares, se copia el patron y al final el metodo test, que evaluará todo el patron al email





})




